import telebot
from telebot import types
import time
import json
import os

TOKEN = '8204693585:AAHo3H_NsANMskc9ubQICp2MKP6H-K0dcdg'
ADMIN_ID = '7943354448'
ADMIN_BKASH_NO = '01774049543'
ADMIN_NAGAD_NO = '01774049543'
BOT_USERNAME = "sohojbuysellbdbot"

bot = telebot.TeleBot(TOKEN)
users = {}
pending_gmails = {}
orders = {}

# --- Data Persistence Functions ---
def save_users():
    """Saves the users data to a JSON file."""
    try:
        with open('users.json', 'w', encoding='utf-8') as f:
            json.dump(users, f, indent=4)
        print("Users data saved successfully.")
    except Exception as e:
        print(f"Error saving users data: {e}")

def load_users():
    """Loads users data from a JSON file."""
    global users
    if os.path.exists('users.json'):
        try:
            with open('users.json', 'r', encoding='utf-8') as f:
                users = json.load(f)
            print("Users data loaded successfully.")
        except json.JSONDecodeError:
            print("Corrupted users.json file. Starting with empty data.")
            users = {}
    else:
        print("users.json not found. Creating a new one.")
        users = {}
# --- End of Data Persistence Functions ---

# --- Bot Initialization ---
load_users()
# --- End of Bot Initialization ---

LOGO = """
тХФтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЧ
тХС    ЁЯЫТ Sohoj Buy Sell BD    тХС
тХЪтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЭ

ЁЯМЯ ржЖржкржирж╛рж░ ржбрж┐ржЬрж┐ржЯрж╛рж▓ рж╕рж╛рж░рзНржнрж┐рж╕рзЗрж░ ржмрж┐рж╢рзНржмрж╕рзНржд ржкрж╛рж░рзНржЯржирж╛рж░ ЁЯМЯ
"""

def home_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        "ЁЯУд Gmail Sell", "ЁЯУе Gmail Buy",
        "ЁЯТ│ Balance", "ЁЯТ╡ Withdraw",
        "ЁЯМР Paid VPN Buy", "ЁЯОе YouTube Premium",
        "ЁЯСе Refer", "ЁЯЖШ Support",
        "ЁЯОБ Play Point Park On"
    ]
    markup.add(*buttons)
    
    user_info = ""
    if str(chat_id) in users:
        user = users[str(chat_id)]
        user_info = f"\nЁЯСд User: @{user['username'] or 'NoUsername'}\nЁЯТ░ Balance: {user['balance']} TK"
    
    welcome_msg = f"""
{LOGO}
{user_info}

ЁЯОп ржирж┐ржЪрзЗрж░ ржорзЗржирзБ ржерзЗржХрзЗ рж╕рзЗржмрж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:
"""
    bot.send_message(chat_id, welcome_msg, reply_markup=markup)

def back_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи")
    return markup

def payment_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("ЁЯУ▓ Bkash", "ЁЯУ▓ Nagad", "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи")
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, LOGO)
    time.sleep(0.5)

    user_id = str(message.from_user.id)
    
    is_new_user = user_id not in users

    if is_new_user:
        users[user_id] = {
            "username": message.from_user.username,
            "balance": 0,
            "hold": 0,
            "referral_count": 0,
            "referred_users": [],
            "joined_date": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        save_users()

    if len(message.text.split()) > 1:
        referrer_id_str = message.text.split()[1]
        try:
            if referrer_id_str in users and referrer_id_str != user_id:
                if user_id not in users[referrer_id_str]["referred_users"]:
                    users[referrer_id_str]["balance"] += 2
                    users[referrer_id_str]["referral_count"] += 1
                    users[referrer_id_str]["referred_users"].append(user_id)
                    bot.send_message(referrer_id_str, f"ЁЯОЙ ржЖржкржирж┐ рзи ржЯрж╛ржХрж╛ ржкрзЗржпрж╝рзЗржЫрзЗржи рж░рзЗржлрж╛рж░ ржмрзЛржирж╛рж╕ рж╣рж┐рж╕рзЗржмрзЗ! ржирждрзБржи ржЗржЙржЬрж╛рж░: @{message.from_user.username or 'NoUsername'}")
                    save_users()
        except ValueError:
            pass

    welcome_msg = f"""
тЬи рж╕рзНржмрж╛ржЧрждржо {message.from_user.first_name}!

ржбрж┐ржЬрж┐ржЯрж╛рж▓ Sohoj Buy Sell BD ржмржЯрзЗ ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржо! ЁЯОЙ

ЁЯФ╣ Gmail ржмрж┐ржХрзНрж░рж┐/ржХрзНрж░ржпрж╝
ЁЯФ╣ Premium VPN рж╕рж╛рж░рзНржнрж┐рж╕
ЁЯФ╣ YouTube Premium ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ
ЁЯФ╣ рж░рзЗржлрж╛рж░ ржкрзНрж░рзЛржЧрзНрж░рж╛ржо
ЁЯФ╣ Play Point Park On

ЁЯТ╝ ржЖржкржирж╛рж░ ржПржХрж╛ржЙржирзНржЯ ржбрж┐ржЯрзЗржЗрж▓рж╕:
ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {users[user_id]['balance']} ржЯрж╛ржХрж╛
ЁЯСе рж░рзЗржлрж╛рж░рзНржб ржЗржЙржЬрж╛рж░: {users[user_id]['referral_count']} ржЬржи

ржирж┐ржЪрзЗрж░ ржорзЗржирзБ ржерзЗржХрзЗ ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ рж╕рзЗржмрж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:
"""
    bot.send_message(message.chat.id, welcome_msg)
    time.sleep(1)
    home_menu(message.chat.id)

@bot.message_handler(func=lambda m: m.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи")
def back_to_home(message):
    bot.clear_step_handler(message)
    home_menu(message.chat.id)

# Play Point Park On section
@bot.message_handler(func=lambda m: m.text == "ЁЯОБ Play Point Park On")
def play_point_menu(message):
    options = """
ЁЯМН ржжрзЗрж╢ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:

ЁЯЗ║ЁЯЗ╕ USA
ЁЯЗ╣ЁЯЗ╝ Taiwan
ЁЯЗмЁЯЗз UK
ЁЯЗ░ЁЯЗ╖ South Korean

ЁЯТб ржкрзНрж░рждрж┐ржЯрж┐ Park On-ржПрж░ ржЬржирзНржп 20 ржЯрж╛ржХрж╛ ржЦрж░ржЪ рж╣ржмрзЗ
"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("ЁЯЗ║ЁЯЗ╕ USA", "ЁЯЗ╣ЁЯЗ╝ Taiwan", "ЁЯЗмЁЯЗз UK", "ЁЯЗ░ЁЯЗ╖ South Korean", "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи")
    msg = bot.send_message(message.chat.id, options, reply_markup=markup)
    bot.register_next_step_handler(msg, process_play_point_country)

def process_play_point_country(message):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)
    
    country = message.text
    if country not in ["ЁЯЗ║ЁЯЗ╕ USA", "ЁЯЗ╣ЁЯЗ╝ Taiwan", "ЁЯЗмЁЯЗз UK", "ЁЯЗ░ЁЯЗ╖ South Korean"]:
        error_msg = "тЭМ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржХржЯрж┐ ржмрзИржз ржжрзЗрж╢ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржиред"
        msg = bot.send_message(message.chat.id, error_msg, reply_markup=back_markup())
        bot.register_next_step_handler(msg, process_play_point_country)
        return

    users[str(message.from_user.id)]["play_point_country"] = country
    quantity_msg = f"""
ЁЯФв ржХрждржЧрзБрж▓рзЛ Park On ржЪрж╛ржи?

ЁЯТб ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржи (рж╕ржВржЦрзНржпрж╛):
"""
    msg = bot.send_message(message.chat.id, quantity_msg, reply_markup=back_markup())
    bot.register_next_step_handler(msg, process_play_point_quantity)

def process_play_point_quantity(message):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)
    
    try:
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError
        
        user_id = str(message.from_user.id)
        users[user_id]["play_point_quantity"] = quantity
        total_price = quantity * 20
        users[user_id]["play_point_price"] = total_price
        
        details_msg = f"""
ЁЯТ░ ржорзЛржЯ ржорзВрж▓рзНржп: {total_price} ржЯрж╛ржХрж╛

ржПржЦржи ржЖржкржирж┐ ржпрзЗ Gmail/Password-ржЧрзБрж▓рзЛрждрзЗ Park On ржХрж░рждрзЗ ржЪрж╛ржи рж╕рзЗржЧрзБрж▓рзЛ ржПржХрж╕рж╛ржерзЗ рж▓рж┐ржЦрзБржи:
(ржкрзНрж░рждрж┐ рж▓рж╛ржЗржирзЗ ржПржХржЯрж┐ Gmail/Password)

ржлрж░ржорзНржпрж╛ржЯ:
example1@gmail.com:password1
example2@gmail.com:password2
"""
        msg = bot.send_message(message.chat.id, details_msg, reply_markup=back_markup())
        bot.register_next_step_handler(msg, process_play_point_details)
        
    except ValueError:
        error_msg = """
тЭМ ржЕржмрзИржз рж╕ржВржЦрзНржпрж╛! рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред

ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи:
"""
        msg = bot.send_message(message.chat.id, error_msg, reply_markup=back_markup())
        bot.register_next_step_handler(msg, process_play_point_quantity)

def process_play_point_details(message):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)
    
    user_id = str(message.from_user.id)
    play_point_details = message.text
    users[user_id]["play_point_details"] = play_point_details

    order_summary = f"""
ЁЯУЭ ржЕрж░рзНржбрж╛рж░ рж╕рж╛рж░рж╛ржВрж╢:

ЁЯМН Country: {users[user_id]["play_point_country"]}
ЁЯФв Quantity: {users[user_id]["play_point_quantity"]} ржЯрж┐
ЁЯТ░ ржорзЛржЯ ржорзВрж▓рзНржп: {users[user_id]["play_point_price"]} TK

ЁЯТ│ ржкрзЗржорзЗржирзНржЯ ржорж╛ржзрзНржпржо ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:
"""
    bot.send_message(message.chat.id, order_summary, reply_markup=payment_markup())
    bot.register_next_step_handler(message, process_play_point_payment)

def process_play_point_payment(message):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)

    user_id = str(message.from_user.id)
    user_data = users[user_id]
    
    method = "Bkash" if "Bkash" in message.text else "Nagad"
    payment_number = ADMIN_BKASH_NO if method == "Bkash" else ADMIN_NAGAD_NO
    price = user_data["play_point_price"]
    
    payment_instructions = f"""
ЁЯТ│ {method} ржП ржЯрж╛ржХрж╛ ржкрж╛ржарж╛ржи:

ЁЯУ▒ Number: {payment_number}
ЁЯТ░ Amount: {price} TK
ЁЯУЭ Reference: PPON{user_id}

тЪая╕П ржЯрж╛ржХрж╛ ржкрж╛ржарж╛ржирзЛрж░ ржкрж░ Transaction ID ржирзЛржЯ ржХрж░рзЗ рж░рж╛ржЦрзБржи

ЁЯУи ржПржЦржи ржЖржкржирж╛рж░ Transaction ID рж▓рж┐ржЦрзБржи:
"""
    msg = bot.send_message(message.chat.id, payment_instructions, reply_markup=back_markup())
    bot.register_next_step_handler(msg, lambda m: confirm_play_point_order(m, method, price))

def confirm_play_point_order(message, method, price):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)
        
    txn_id = message.text
    user_id = str(message.from_user.id)
    
    order_id = f"PPON{int(time.time())}{user_id}"
    orders[order_id] = {
        "user_id": user_id,
        "service": "Play Point Park On",
        "country": users[user_id]["play_point_country"],
        "quantity": users[user_id]["play_point_quantity"],
        "details": users[user_id]["play_point_details"],
        "price": price,
        "method": method,
        "txn_id": txn_id,
        "status": "pending"
    }

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("тЬЕ Deliver", callback_data=f"deliver_pp_{user_id}"))

    admin_msg = f"""
ЁЯОБ ржирждрзБржи Play Point Park On ржЕрж░рзНржбрж╛рж░:

ЁЯУж Order ID: {order_id}
ЁЯСд User: @{message.from_user.username or 'N/A'}
ЁЯЖФ User ID: {user_id}
ЁЯМН Country: {orders[order_id]["country"]}
ЁЯФв Quantity: {orders[order_id]["quantity"]} ржЯрж┐
ЁЯТ░ Amount: {price} TK
ЁЯТ│ Method: {method}
ЁЯУЭ Txn ID: {txn_id}
тП░ Time: {time.strftime("%Y-%m-%d %H:%M:%S")}

ЁЯУй Gmail Details:
{orders[order_id]["details"]}
"""
    bot.send_message(ADMIN_ID, admin_msg, reply_markup=markup)

    user_confirmation = f"""
тЬЕ ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ ржХржиржлрж╛рж░рзНржо рж╣ржпрж╝рзЗржЫрзЗ!

ЁЯУж Order ID: {order_id}
ЁЯОБ Service: Play Point Park On
ЁЯТ░ Paid: {price} TK

ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ржЯрж┐ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред
ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ рж╕ржоржпрж╝: рзз-рззрзи ржШржирзНржЯрж╛

рж╕рзЗржмрж╛ ржирзЗржУржпрж╝рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж! ЁЯЩП
"""
    bot.send_message(message.chat.id, user_confirmation)
    home_menu(message.chat.id)

# Gmail Sell Section
@bot.message_handler(func=lambda m: m.text == "ЁЯУд Gmail Sell")
def gmail_sell(message):
    instructions = """
ЁЯУз Gmail ржмрж┐ржХрзНрж░рж┐ ржХрж░рж╛рж░ ржирж┐ржпрж╝ржо:

1. ржлрж░ржорзНржпрж╛ржЯ: example@gmail.com:password
2. Gmail рж╕ржорзНржкрзВрж░рзНржг ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ рж╕рж╣ рж╣рждрзЗ рж╣ржмрзЗ
3. ржХрзЛржирзЛ 2FA/2-Step Verification ржерж╛ржХрж╛ ржпрж╛ржмрзЗ ржирж╛
4. ржкрзНрж░рждрж┐ржЯрж┐ Gmail ржПрж░ ржЬржирзНржп ржкрж╛ржмрзЗржи рзн ржЯрж╛ржХрж╛

тЪая╕П ржнрзБрж▓ ржлрж░ржорзНржпрж╛ржЯ ржмрж╛ Fake Gmail ржжрж┐рж▓рзЗ ржЯрж╛ржХрж╛ ржжрзЗржУржпрж╝рж╛ рж╣ржмрзЗ ржирж╛

ржПржЦржи ржЖржкржирж╛рж░ Gmail ржЖржЗржбрж┐ ржУ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржжрж┐ржи:
"""
    msg = bot.send_message(message.chat.id, instructions, reply_markup=back_markup())
    bot.register_next_step_handler(msg, process_gmail)

def process_gmail(message):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)

    if ":" not in message.text or "@" not in message.text:
        error_msg = """
тЭМ ржнрзБрж▓ ржлрж░ржорзНржпрж╛ржЯ! рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯрзЗ ржжрж┐ржи:

example@gmail.com:password

ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи:
"""
        msg = bot.send_message(message.chat.id, error_msg, reply_markup=back_markup())
        bot.register_next_step_handler(msg, process_gmail)
        return

    user_id = str(message.from_user.id)
    pending_gmails[user_id] = message.text
    users[user_id]["hold"] += 7
    save_users()

    success_msg = """
тЬЕ Gmail ржЬржорж╛ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗ!

ржЖржкржирж╛рж░ Gmail Admin ржПрж░ рж░рж┐ржнрж┐ржЙ ржПрж░ ржЬржирзНржп ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред 
рж╕ржарж┐ржХ рж╣рж▓рзЗ рзн ржЯрж╛ржХрж╛ ржЖржкржирж╛рж░ ржПржХрж╛ржЙржирзНржЯрзЗ ржпрзЛржЧ ржХрж░рж╛ рж╣ржмрзЗред

тП│ рж╕рж░рзНржмрзЛржЪрзНржЪ рзирзк ржШржирзНржЯрж╛рж░ ржоржзрзНржпрзЗ рж░рж┐ржнрж┐ржЙ ржХрж░рж╛ рж╣ржмрзЗред
"""
    bot.send_message(message.chat.id, success_msg)

    username = message.from_user.username or "NoUsername"
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("тЬЕ Approve", callback_data=f"approve_{user_id}"),
        types.InlineKeyboardButton("тЭМ Reject", callback_data=f"reject_{user_id}")
    )
    
    admin_msg = f"""
ЁЯУз ржирждрзБржи Gmail Submission:

ЁЯСд User: @{username}
ЁЯЖФ ID: {user_id}
ЁЯУЕ Time: {time.strftime("%Y-%m-%d %H:%M:%S")}

ЁЯУй Gmail Details:
{message.text}
"""
    bot.send_message(ADMIN_ID, admin_msg, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if str(call.from_user.id) != ADMIN_ID:
        bot.answer_callback_query(call.id, "тЭМ ржЖржкржирж╛рж░ ржЕржирзБржорждрж┐ ржирзЗржЗ ржПржЗ ржХрж╛ржЬржЯрж┐ ржХрж░рждрзЗ!")
        return

    data = call.data.split('_')
    action = data[0]
    user_id = str(data[1])

    if action == "approve":
        if user_id in pending_gmails:
            gmail = pending_gmails[user_id]
            users[user_id]["hold"] -= 7
            users[user_id]["balance"] += 7
            
            user_msg = f"""
тЬЕ ржЖржкржирж╛рж░ Gmail ржЕржирзБржорзЛржжрж┐ржд рж╣ржпрж╝рзЗржЫрзЗ!

ЁЯУз Gmail: {gmail.split(':')[0]}
ЁЯТ░ ржкрзНрж░рж╛ржкрзНржд Amount: рзн ржЯрж╛ржХрж╛

ржЖржкржирж╛рж░ ржирждрзБржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {users[user_id]['balance']} TK
"""
            bot.send_message(user_id, user_msg)
            
            bot.answer_callback_query(call.id, "тЬЕ Gmail Approved")
            bot.send_message(ADMIN_ID, f"тЬЕ Gmail approved for user {user_id}")
            
            del pending_gmails[user_id]
            save_users()

    elif action == "reject":
        if user_id in pending_gmails:
            users[user_id]["hold"] -= 7
            
            user_msg = """
тЭМ ржЖржкржирж╛рж░ Gmail рж░рж┐ржЬрзЗржХрзНржЯ рж╣ржпрж╝рзЗржЫрзЗ!

ржХрж╛рж░ржг: 
- ржнрзБрж▓ ржлрж░ржорзНржпрж╛ржЯ
- Fake ржмрж╛ ржЕржЪрж▓ Gmail
- 2FA enabled

ржЖрж░ржУ рждржерзНржпрзЗрж░ ржЬржирзНржп рж╕рж╛ржкрзЛрж░рзНржЯрзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред
"""
            bot.send_message(user_id, user_msg)
            
            bot.answer_callback_query(call.id, "тЭМ Gmail Rejected")
            bot.send_message(ADMIN_ID, f"тЭМ Gmail rejected for user {user_id}")
            
            del pending_gmails[user_id]
            save_users()

    elif action == "pay":
        amount = int(data[2])
        users[user_id]["hold"] -= amount
        
        user_msg = f"""
тЬЕ ржЖржкржирж╛рж░ ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржЕржирзБрж░рзЛржз ржЕржирзБржорзЛржжрж┐ржд рж╣ржпрж╝рзЗржЫрзЗ!

ЁЯТ░ Amount: {amount} TK
ЁЯУК ржирждрзБржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {users[user_id]['balance']} TK

ржЯрж╛ржХрж╛ рзз-рзи ржШржирзНржЯрж╛рж░ ржоржзрзНржпрзЗ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржпрзЛржЧ рж╣ржмрзЗред
"""
        bot.send_message(user_id, user_msg)
        
        bot.answer_callback_query(call.id, "тЬЕ Payment sent")
        bot.send_message(ADMIN_ID, f"тЬЕ Payment of {amount} TK sent to user {user_id}")
        save_users()

    elif action == "deliver":
        service = data[1]
        user_id = str(data[2])
        
        if service == "gmail":
            quantity = users[user_id].get("gmail_quantity", 1)
            gmail_type = users[user_id].get("gmail_type", "Gmail")
            instructions = f"ЁЯУй User {user_id} ржХрзЗ {quantity}ржЯрж┐ {gmail_type} ржкрж╛ржарж╛ржи:\n\n/delivery_{user_id}"
        elif service == "vpn":
            vpn = users[user_id].get("vpn", "VPN")
            instructions = f"ЁЯУй User {user_id} ржХрзЗ {vpn} ржкрж╛ржарж╛ржи:\n\n/delivery_{user_id}"
        elif service == "yt":
            yt_plan = users[user_id].get("yt_plan", "YouTube Premium")
            instructions = f"ЁЯУй User {user_id} ржХрзЗ {yt_plan} ржкрж╛ржарж╛ржи:\n\n/delivery_{user_id}"
        elif service == "pp":
            instructions = f"ЁЯУй User {user_id} ржХрзЗ Play Point Park On ржкрж╛ржарж╛ржи:\n\n/delivery_pp_{user_id}"

        bot.send_message(ADMIN_ID, instructions)
        bot.answer_callback_query(call.id, "тЬЕ Delivery instructions sent")

@bot.message_handler(func=lambda m: m.text == "ЁЯУе Gmail Buy")
def gmail_buy(message):
    options = """
ЁЯОп Gmail ржЯрж╛ржЗржк ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:

ЁЯЗ║ЁЯЗ╕ USA Gmail (15TK)
- ржЙржЪрзНржЪ ржорж╛ржирзЗрж░ Gmail
- ржмрж┐рж╢рзНржмржмрзНржпрж╛ржкрзА ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕
- ржжрзНрж░рзБржд ржбрзЗрж▓рж┐ржнрж╛рж░рж┐

ЁЯЗзЁЯЗй BD Gmail (10TK)
- рж╕рзНржерж╛ржирзАржпрж╝ржнрж╛ржмрзЗ рждрзИрж░рж┐
- ржнрж╛рж▓ ржорж╛ржирзЗрж░
- рж╕рж╛рж╢рзНрж░ржпрж╝рзА ржорзВрж▓рзНржп
"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("ЁЯЗ║ЁЯЗ╕ USA Gmail (15TK)", "ЁЯЗзЁЯЗй BD Gmail (10TK)", "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи")
    bot.send_message(message.chat.id, options, reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["ЁЯЗ║ЁЯЗ╕ USA Gmail (15TK)", "ЁЯЗзЁЯЗй BD Gmail (10TK)"])
def select_gmail_type(message):
    users[str(message.from_user.id)]["gmail_type"] = message.text
    
    quantity_msg = """
ЁЯФв ржХрждржЧрзБрж▓рзЛ Gmail ржЪрж╛ржи?

ЁЯТб ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржи (рж╕ржВржЦрзНржпрж╛):
- 1 ржЯрж┐ Gmail
- 5 ржЯрж┐ Gmail
- 10 ржЯрж┐ Gmail

ржмрж┐ржГржжрзНрж░ржГ: ржмрзЗрж╢рж┐ ржХрж┐ржирж▓рзЗ ржбрж┐рж╕ржХрж╛ржЙржирзНржЯ ржкрзЗрждрзЗ ржкрж╛рж░рзЗржи!
"""
    msg = bot.send_message(message.chat.id, quantity_msg, reply_markup=back_markup())
    bot.register_next_step_handler(msg, process_gmail_quantity)

def process_gmail_quantity(message):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)

    try:
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError

        user_id = str(message.from_user.id)    
        users[user_id]["gmail_quantity"] = quantity    
        gmail_type = users[user_id]["gmail_type"]    
        
        base_price = 15 if "USA" in gmail_type else 10
        price = base_price * quantity
        
        if quantity >= 10:
            discount = price * 0.10
            price -= discount
            discount_msg = f"ЁЯОЙ рззрзж+ ржЕрж░рзНржбрж╛рж░рзЗ рззрзж% ржбрж┐рж╕ржХрж╛ржЙржирзНржЯ ржкрзЗржпрж╝рзЗржЫрзЗржи! (-{discount:.0f} TK)"
        elif quantity >= 5:
            discount = price * 0.05
            price -= discount
            discount_msg = f"ЁЯОЙ рзл+ ржЕрж░рзНржбрж╛рж░рзЗ рзл% ржбрж┐рж╕ржХрж╛ржЙржирзНржЯ ржкрзЗржпрж╝рзЗржЫрзЗржи! (-{discount:.0f} TK)"
        else:
            discount_msg = ""
        
        users[user_id]["gmail_price"] = int(price)
        
        order_summary = f"""
ЁЯУЭ ржЕрж░рзНржбрж╛рж░ рж╕рж╛рж░рж╛ржВрж╢:

ЁЯУз Type: {gmail_type}
ЁЯФв Quantity: {quantity} ржЯрж┐
{discount_msg}
ЁЯТ░ ржорзЛржЯ ржорзВрж▓рзНржп: {int(price)} TK

ЁЯТ│ ржкрзЗржорзЗржирзНржЯ ржорж╛ржзрзНржпржо ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:
"""
        bot.send_message(message.chat.id, order_summary, reply_markup=payment_markup())
        bot.register_next_step_handler(message, process_gmail_payment)

    except:
        error_msg = """
тЭМ ржЕржмрзИржз рж╕ржВржЦрзНржпрж╛! рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржи:

ржЙржжрж╛рж╣рж░ржг: 1, 5, 10

ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи:
"""
        msg = bot.send_message(message.chat.id, error_msg, reply_markup=back_markup())
        bot.register_next_step_handler(msg, process_gmail_quantity)

@bot.message_handler(func=lambda m: m.text in ["ЁЯУ▓ Bkash", "ЁЯУ▓ Nagad"] and "gmail_price" in users.get(str(m.from_user.id), {}))
def process_gmail_payment(message):
    user_id = str(message.from_user.id)
    user_data = users[user_id]

    method = "Bkash" if "Bkash" in message.text else "Nagad"
    payment_number = ADMIN_BKASH_NO if method == "Bkash" else ADMIN_NAGAD_NO
    price = user_data["gmail_price"]
    gmail_type = user_data["gmail_type"]
    quantity = user_data["gmail_quantity"]

    payment_instructions = f"""
ЁЯТ│ {method} ржП ржЯрж╛ржХрж╛ ржкрж╛ржарж╛ржи:

ЁЯУ▒ Number: {payment_number}
ЁЯТ░ Amount: {price} TK
ЁЯУЭ Reference: Gmail{quantity}

тЪая╕П ржЯрж╛ржХрж╛ ржкрж╛ржарж╛ржирзЛрж░ ржкрж░ Transaction ID ржирзЛржЯ ржХрж░рзЗ рж░рж╛ржЦрзБржи

ЁЯУи ржПржЦржи ржЖржкржирж╛рж░ Transaction ID рж▓рж┐ржЦрзБржи:
"""
    msg = bot.send_message(message.chat.id, payment_instructions, reply_markup=back_markup())
    bot.register_next_step_handler(msg, lambda m: confirm_gmail_order(m, method, price, gmail_type, quantity))

def confirm_gmail_order(message, method, price, gmail_type, quantity):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)

    txn_id = message.text
    user_id = str(message.from_user.id)

    order_id = f"GMAIL{int(time.time())}{user_id}"
    orders[order_id] = {
        "user_id": user_id,
        "service": "Gmail",
        "type": gmail_type,
        "quantity": quantity,
        "price": price,
        "method": method,
        "txn_id": txn_id,
        "status": "pending"
    }

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("тЬЕ Deliver", callback_data=f"deliver_gmail_{user_id}"))

    admin_msg = f"""
ЁЯЫТ ржирждрзБржи Gmail ржЕрж░рзНржбрж╛рж░:

ЁЯУж Order ID: {order_id}
ЁЯСд User: @{message.from_user.username or 'N/A'}
ЁЯЖФ User ID: {user_id}
ЁЯУз Type: {gmail_type}
ЁЯФв Quantity: {quantity}
ЁЯТ░ Amount: {price} TK
ЁЯТ│ Method: {method}
ЁЯУЭ Txn ID: {txn_id}
тП░ Time: {time.strftime("%Y-%m-%d %H:%M:%S")}
"""
    bot.send_message(ADMIN_ID, admin_msg, reply_markup=markup)

    user_confirmation = f"""
тЬЕ ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ ржХржиржлрж╛рж░рзНржо рж╣ржпрж╝рзЗржЫрзЗ!

ЁЯУж Order ID: {order_id}
ЁЯУз Service: {gmail_type}
ЁЯФв Quantity: {quantity}
ЁЯТ░ Paid: {price} TK

ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ржЯрж┐ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред 
ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ рж╕ржоржпрж╝: рзз-рззрзи ржШржирзНржЯрж╛

рж╕рзЗржмрж╛ ржирзЗржУржпрж╝рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж! ЁЯЩП
"""
    bot.send_message(message.chat.id, user_confirmation)
    home_menu(message.chat.id)

@bot.message_handler(func=lambda m: m.text == "ЁЯТ│ Balance")
def check_balance(message):
    user_id = str(message.from_user.id)
    if user_id in users:
        balance = users[user_id]["balance"]
        hold = users[user_id]["hold"]
        ref_count = users[user_id]["referral_count"]
        join_date = users[user_id].get("joined_date", "N/A")

        estimated_earnings = balance + hold + (ref_count * 2)

        balance_msg = f"""
ЁЯТ░ ржЖржкржирж╛рж░ ржПржХрж╛ржЙржирзНржЯ ржмрж┐ржмрж░ржгрзА:

ЁЯТ╡ Available Balance: {balance} TK
тП│ Hold Balance: {hold} TK
ЁЯТ░ Total Balance: {balance + hold} TK
ЁЯСе Referrals: {ref_count} ржЬржи
ЁЯУИ Estimated Earnings: {estimated_earnings} TK
ЁЯУЕ Join Date: {join_date}

ЁЯТб ржЯрж╛ржХрж╛ ржЙрждрзНрждрзЛрж▓ржи ржХрж░рждрзЗ 'ЁЯТ╡ Withdraw' ржЕржкрж╢ржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
"""
        bot.send_message(message.chat.id, balance_msg)
    else:
        error_msg = """
тЭМ ржПржХрж╛ржЙржирзНржЯ ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐!

/start рж▓рж┐ржЦрзЗ ржЖржмрж╛рж░ рж░рзЗржЬрж┐рж╕рзНржЯрж╛рж░ ржХрж░рзБржи
"""
        bot.send_message(message.chat.id, error_msg)

@bot.message_handler(func=lambda m: m.text == "ЁЯТ╡ Withdraw")
def withdraw(message):
    user_id = str(message.from_user.id)
    if user_id in users:
        balance = users[user_id]["balance"]

        if balance < 60:
            error_msg = f"""
тЭМ рж╕рж░рзНржмржирж┐ржорзНржи ржЙрждрзНрждрзЛрж▓ржи 60 ржЯрж╛ржХрж╛

ЁЯТ░ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {balance} TK
ЁЯОп ржкрзНрж░ржпрж╝рзЛржЬржи: {60 - balance} TK more

ЁЯТб ржЯрж╛ржХрж╛ ржЙржкрж╛рж░рзНржЬржирзЗрж░ ржЙржкрж╛ржпрж╝:
1. Gmail ржмрж┐ржХрзНрж░рж┐ ржХрж░рзБржи (рзн TK/Gmail)
2. ржмржирзНржзрзБржжрзЗрж░ рж░рзЗржлрж╛рж░ ржХрж░рзБржи (рзи TK/Referral)
"""
            bot.send_message(message.chat.id, error_msg)
            return

        withdraw_msg = f"""
ЁЯТ╡ ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржи:

ЁЯТ░ Available: {balance} TK
ЁЯОп Minimum: 60 TK
ЁЯТ╕ Maximum: {balance} TK

ржЙржжрж╛рж╣рж░ржг: 60, 100, 200
"""
        msg = bot.send_message(message.chat.id, withdraw_msg, reply_markup=back_markup())    
        bot.register_next_step_handler(msg, process_withdraw_amount)

def process_withdraw_amount(message):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)

    try:
        amount = int(message.text)
        user_id = str(message.from_user.id)
        balance = users[user_id]["balance"]

        if amount < 60:    
            error_msg = """
тЭМ рж╕рж░рзНржмржирж┐ржорзНржи 60 ржЯрж╛ржХрж╛ ржЙрждрзНрждрзЛрж▓ржи ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи!

ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи:
"""
            msg = bot.send_message(message.chat.id, error_msg, reply_markup=back_markup())    
            bot.register_next_step_handler(msg, process_withdraw_amount)    
            return    
            
        if amount > balance:    
            error_msg = f"""
тЭМ ржЖржкржирж╛рж░ ржПржХрж╛ржЙржирзНржЯрзЗ ржкрж░рзНржпрж╛ржкрзНржд ржЯрж╛ржХрж╛ ржирзЗржЗ!

ЁЯТ░ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {balance} TK
ЁЯТ╕ ржЪрж╛рж╣рж┐ржжрж╛ржХрзГржд: {amount} TK
ЁЯУЙ ржШрж╛ржЯрждрж┐: {amount - balance} TK

ржХржо ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржи:
"""
            msg = bot.send_message(message.chat.id, error_msg, reply_markup=back_markup())    
            bot.register_next_step_handler(msg, process_withdraw_amount)    
            return    
            
        users[user_id]["balance"] -= amount    
        users[user_id]["hold"] += amount
        save_users()
        
        method_msg = """
ЁЯУ▓ ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржорж╛ржзрзНржпржо ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:

ЁЯУ▒ Bkash - ржжрзНрж░рзБржд ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг
ЁЯУ▒ Nagad - ржжрзНрж░рзБржд ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг

ржмрж┐ржГржжрзНрж░ржГ: ржПржХржЗ ржиржорзНржмрж░рзЗ ржЯрж╛ржХрж╛ ржкрж╛ржарж╛ржирзЛ рж╣ржмрзЗ ржпрзЗржЦрж╛ржи ржерзЗржХрзЗ ржкрзЗржорзЗржирзНржЯ ржХрж░рзЗржЫрзЗржи
"""
        msg = bot.send_message(message.chat.id, method_msg, reply_markup=payment_markup())    
        bot.register_next_step_handler(msg, lambda m: process_withdraw_method(m, amount))

    except:
        error_msg = """
тЭМ ржЕржмрзИржз ржкрж░рж┐ржорж╛ржг! рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржи:

ржЙржжрж╛рж╣рж░ржг: 60, 100, 200

ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи:
"""
        msg = bot.send_message(message.chat.id, error_msg, reply_markup=back_markup())
        bot.register_next_step_handler(msg, process_withdraw_amount)

def process_withdraw_method(message, amount):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        users[str(message.from_user.id)]["balance"] += amount
        users[str(message.from_user.id)]["hold"] -= amount
        save_users()
        return home_menu(message.chat.id)

    method = "Bkash" if "Bkash" in message.text else "Nagad"
    
    number_msg = f"""
ЁЯУ▒ ржЖржкржирж╛рж░ {method} ржиржорзНржмрж░ рж▓рж┐ржЦрзБржи:

тЪая╕П ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржпрзЗ ржиржорзНржмрж░ржЯрж┐ рж╕ржарж┐ржХ
ЁЯТб ржПржХржЗ ржиржорзНржмрж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи ржпрзЗржЦрж╛ржи ржерзЗржХрзЗ ржкрзЗржорзЗржирзНржЯ ржХрж░рзЗржЫрзЗржи

ржиржорзНржмрж░ржЯрж┐ ржПржЗ ржлрж░ржорзНржпрж╛ржЯрзЗ рж▓рж┐ржЦрзБржи:
01XXXXXXXXX
"""
    msg = bot.send_message(message.chat.id, number_msg, reply_markup=back_markup())
    bot.register_next_step_handler(msg, lambda m: complete_withdraw(m, amount, method))

def complete_withdraw(message, amount, method):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        users[str(message.from_user.id)]["balance"] += amount
        users[str(message.from_user.id)]["hold"] -= amount
        save_users()
        return home_menu(message.chat.id)

    number = message.text
    user_id = str(message.from_user.id)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("тЬЕ Pay", callback_data=f"pay_{user_id}_{amount}"))

    withdraw_id = f"WD{int(time.time())}{user_id}"
    
    admin_msg = f"""
ЁЯТ╕ ржирждрзБржи ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржЕржирзБрж░рзЛржз:

ЁЯУЛ Withdrawal ID: {withdraw_id}
ЁЯСд User: @{message.from_user.username or 'N/A'}
ЁЯЖФ User ID: {user_id}
ЁЯТ░ Amount: {amount} TK
ЁЯУ▒ Method: {method}
ЁЯУЮ Number: {number}
тП░ Time: {time.strftime("%Y-%m-%d %H:%M:%S")}

ЁЯТб User Balance: {users[user_id]['balance']} TK
"""
    bot.send_message(ADMIN_ID, admin_msg, reply_markup=markup)

    user_confirmation = f"""
тЬЕ ржЖржкржирж╛рж░ ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржЕржирзБрж░рзЛржз ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ!

ЁЯУЛ Withdrawal ID: {withdraw_id}
ЁЯТ░ Amount: {amount} TK
ЁЯУ▒ Method: {method}
ЁЯУЮ Number: {number}

тП│ Admin ржЕржирзБржорзЛржжржи ржХрж░рж▓рзЗ рзз-рззрзи ржШржирзНржЯрж╛рж░ ржоржзрзНржпрзЗ ржЯрж╛ржХрж╛ ржкрж╛ржарж╛ржирзЛ рж╣ржмрзЗред

рж╕рзЗржмрж╛ ржирзЗржУржпрж╝рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж! ЁЯЩП
"""
    bot.send_message(message.chat.id, user_confirmation)
    home_menu(message.chat.id)

@bot.message_handler(func=lambda m: m.text == "ЁЯМР Paid VPN Buy")
def vpn_buy(message):
    vpn_options = """
ЁЯФТ VPN ржкрзНржпрж╛ржХрзЗржЬ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:

NordVPN 7 Days (30TK)
- ржЙржЪрзНржЪ ржЧрждрж┐
- 60+ ржжрзЗрж╢
- No Logs Policy

ExpressVPN 7 Days (30TK)
- рж╕рж░рзНржмрзЛржЪрзНржЪ ржЧрждрж┐
- 90+ ржжрзЗрж╢
- TrustedServer Technology

ЁЯТб ржЙржнржпрж╝ VPN Premium quality ржПрж░
"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("NordVPN 7 Days (30TK)", "ExpressVPN 7 Days (30TK)", "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи")
    bot.send_message(message.chat.id, vpn_options, reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["NordVPN 7 Days (30TK)", "ExpressVPN 7 Days (30TK)"])
def select_vpn(message):
    users[str(message.from_user.id)]["vpn"] = message.text
    
    order_summary = f"""
ЁЯУЭ ржЕрж░рзНржбрж╛рж░ рж╕рж╛рж░рж╛ржВрж╢:

ЁЯФТ Service: {message.text}
ЁЯТ░ ржорзВрж▓рзНржп: 30 TK

ЁЯТ│ ржкрзЗржорзЗржирзНржЯ ржорж╛ржзрзНржпржо ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:
"""
    bot.send_message(message.chat.id, order_summary, reply_markup=payment_markup())
    bot.register_next_step_handler(message, process_vpn_payment)

def process_vpn_payment(message):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)

    method = "Bkash" if "Bkash" in message.text else "Nagad"
    payment_number = ADMIN_BKASH_NO if method == "Bkash" else ADMIN_NAGAD_NO
    
    payment_instructions = f"""
ЁЯТ│ {method} ржП ржЯрж╛ржХрж╛ ржкрж╛ржарж╛ржи:

ЁЯУ▒ Number: {payment_number}
ЁЯТ░ Amount: 30 TK
ЁЯУЭ Reference: VPN

тЪая╕П ржЯрж╛ржХрж╛ ржкрж╛ржарж╛ржирзЛрж░ ржкрж░ Transaction ID ржирзЛржЯ ржХрж░рзЗ рж░рж╛ржЦрзБржи

ЁЯУи ржПржЦржи ржЖржкржирж╛рж░ Transaction ID рж▓рж┐ржЦрзБржи:
"""
    msg = bot.send_message(message.chat.id, payment_instructions, reply_markup=back_markup())
    bot.register_next_step_handler(msg, lambda m: confirm_vpn_order(m, method))

def confirm_vpn_order(message, method):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)

    txn_id = message.text
    user_id = str(message.from_user.id)
    vpn = users[user_id]["vpn"]

    order_id = f"VPN{int(time.time())}{user_id}"
    orders[order_id] = {
        "user_id": user_id,
        "service": "VPN",
        "type": vpn,
        "price": 30,
        "method": method,
        "txn_id": txn_id,
        "status": "pending"
    }

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("тЬЕ Deliver", callback_data=f"deliver_vpn_{user_id}"))

    admin_msg = f"""
ЁЯФР ржирждрзБржи VPN ржЕрж░рзНржбрж╛рж░:

ЁЯУж Order ID: {order_id}
ЁЯСд User: @{message.from_user.username or 'N/A'}
ЁЯЖФ User ID: {user_id}
ЁЯФТ VPN: {vpn}
ЁЯТ░ Amount: 30 TK
ЁЯТ│ Method: {method}
ЁЯУЭ Txn ID: {txn_id}
тП░ Time: {time.strftime("%Y-%m-%d %H:%M:%S")}"
"""
    bot.send_message(ADMIN_ID, admin_msg, reply_markup=markup)

    user_confirmation = f"""
тЬЕ ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ ржХржиржлрж╛рж░рзНржо рж╣ржпрж╝рзЗржЫрзЗ!

ЁЯУж Order ID: {order_id}
ЁЯФТ Service: {vpn}
ЁЯТ░ Paid: 30 TK

ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ржЯрж┐ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред 
ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ рж╕ржоржпрж╝: рзз-рзм ржШржирзНржЯрж╛

рж╕рзЗржмрж╛ ржирзЗржУржпрж╝рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж! ЁЯЩП
"""
    bot.send_message(message.chat.id, user_confirmation)
    home_menu(message.chat.id)

@bot.message_handler(func=lambda m: m.text == "ЁЯОе YouTube Premium")
def yt_premium(message):
    yt_options = """
ЁЯОм YouTube Premium ржкрзНржпрж╛ржХрзЗржЬ:

1 Month (25TK)
- ржмрж┐ржирж╛ ржмрж┐ржЬрзНржЮрж╛ржкржирзЗ ржнрж┐ржбрж┐ржУ
- ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржкрзНрж▓рзЗржмрзНржпрж╛ржХ
- ржЕржлрж▓рж╛ржЗржи ржбрж╛ржЙржирж▓рзЛржб

1 Year (150TK)
- 12 ржорж╛рж╕рзЗрж░ ржЬржирзНржп ржЙржкрж░рзЗрж░ рж╕ржм рж╕рзБржмрж┐ржзрж╛
- ржорж╛рж╕рж┐ржХ 12.5 TK (50% рж╕рж╛рж╢рзНрж░ржпрж╝рзА)
- ржПржХржмрж╛рж░рзЗ рззрзи ржорж╛рж╕рзЗрж░ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕

ЁЯТб ржЙржнржпрж╝ ржкрзНржпрж╛ржХрзЗржЬ Premium quality ржПрж░
"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("1 Month (25TK)", "1 Year (150TK)", "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи")
    bot.send_message(message.chat.id, yt_options, reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["1 Month (25TK)", "1 Year (150TK)"])
def select_yt_plan(message):
    users[str(message.from_user.id)]["yt_plan"] = message.text
    price = 25 if "Month" in message.text else 150
    
    order_summary = f"""
ЁЯУЭ ржЕрж░рзНржбрж╛рж░ рж╕рж╛рж░рж╛ржВрж╢:

ЁЯОм Service: {message.text}
ЁЯТ░ ржорзВрж▓рзНржп: {price} TK

ЁЯТ│ ржкрзЗржорзЗржирзНржЯ ржорж╛ржзрзНржпржо ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:
"""
    bot.send_message(message.chat.id, order_summary, reply_markup=payment_markup())
    bot.register_next_step_handler(message, process_yt_payment)

def process_yt_payment(message):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)

    method = "Bkash" if "Bkash" in message.text else "Nagad"
    payment_number = ADMIN_BKASH_NO if method == "Bkash" else ADMIN_NAGAD_NO
    yt_plan = users[str(message.from_user.id)]["yt_plan"]
    price = 25 if "Month" in yt_plan else 150
    
    payment_instructions = f"""
ЁЯТ│ {method} ржП ржЯрж╛ржХрж╛ ржкрж╛ржарж╛ржи:

ЁЯУ▒ Number: {payment_number}
ЁЯТ░ Amount: {price} TK
ЁЯУЭ Reference: YT

тЪая╕П ржЯрж╛ржХрж╛ ржкрж╛ржарж╛ржирзЛрж░ ржкрж░ Transaction ID ржирзЛржЯ ржХрж░рзЗ рж░рж╛ржЦрзБржи

ЁЯУи ржПржЦржи ржЖржкржирж╛рж░ Transaction ID рж▓рж┐ржЦрзБржи:
"""
    msg = bot.send_message(message.chat.id, payment_instructions, reply_markup=back_markup())
    bot.register_next_step_handler(msg, lambda m: confirm_yt_order(m, method))

def confirm_yt_order(message, method):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)

    txn_id = message.text
    user_id = str(message.from_user.id)
    yt_plan = users[user_id]["yt_plan"]
    price = 25 if "Month" in yt_plan else 150

    order_id = f"YT{int(time.time())}{user_id}"
    orders[order_id] = {
        "user_id": user_id,
        "service": "YouTube Premium",
        "type": yt_plan,
        "price": price,
        "method": method,
        "txn_id": txn_id,
        "status": "pending"
    }

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("тЬЕ Deliver", callback_data=f"deliver_yt_{user_id}"))

    admin_msg = f"""
ЁЯУ║ ржирждрзБржи YouTube Premium ржЕрж░рзНржбрж╛рж░:

ЁЯУж Order ID: {order_id}
ЁЯСд User: @{message.from_user.username or 'N/A'}
ЁЯЖФ User ID: {user_id}
ЁЯОм Plan: {yt_plan}
ЁЯТ░ Amount: {price} TK
ЁЯТ│ Method: {method}
ЁЯУЭ Txn ID: {txn_id}
тП░ Time: {time.strftime("%Y-%m-%d %H:%M:%S")}
"""
    bot.send_message(ADMIN_ID, admin_msg, reply_markup=markup)

    user_confirmation = f"""
тЬЕ ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ ржХржиржлрж╛рж░рзНржо рж╣ржпрж╝рзЗржЫрзЗ!

ЁЯУж Order ID: {order_id}
ЁЯОм Service: {yt_plan}
ЁЯТ░ Paid: {price} TK

ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ржЯрж┐ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред 
ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ рж╕ржоржпрж╝: рзз-рзм ржШржирзНржЯрж╛

рж╕рзЗржмрж╛ ржирзЗржУржпрж╝рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж! ЁЯЩП
"""
    bot.send_message(message.chat.id, user_confirmation)
    home_menu(message.chat.id)

@bot.message_handler(func=lambda m: m.text == "ЁЯСе Refer")
def refer(message):
    user_id = str(message.from_user.id)
    if user_id in users:
        ref_count = users[user_id]["referral_count"]
        ref_earnings = ref_count * 2
        ref_link = f"https://t.me/{BOT_USERNAME}?start={user_id}"

        refer_msg = f"""
ЁЯУв рж░рзЗржлрж╛рж░ ржкрзНрж░рзЛржЧрзНрж░рж╛ржо:

ЁЯФЧ ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ:
{ref_link}

ЁЯОЙ ржкрзНрж░рждрж┐ржЯрж┐ рж░рзЗржлрж╛рж░рзЗрж▓рзЗрж░ ржЬржирзНржп ржкрж╛ржмрзЗржи рзи ржЯрж╛ржХрж╛
ЁЯТ░ ржорзЛржЯ ржЙржкрж╛рж░рзНржЬржи: {ref_earnings} TK
ЁЯСе ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзНржб ржЗржЙржЬрж╛рж░: {ref_count} ржЬржи

ЁЯУК рж░рзЗржлрж╛рж░ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕:
- рж╕ржлрж▓ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи: {ref_count} ржЬржи
- ржмрж╛ржХрж┐ рж░ржпрж╝рзЗржЫрзЗ: {ref_count * 2} TK ржЙржкрж╛рж░рзНржЬржи

ЁЯТб рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рж╛рж░ ржЯрж┐ржкрж╕:
1. Facebook ржЧрзНрж░рзБржкрзЗ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржи
2. WhatsApp/Telegram ржЧрзНрж░рзБржкрзЗ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржи
3. ржмржирзНржзрзБржжрзЗрж░ рж╕рж╛ржерзЗ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржи

ржмржирзНржзрзБржжрзЗрж░ рж╕рж╛ржерзЗ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржи ржПржмржВ ржЯрж╛ржХрж╛ ржЙржкрж╛рж░рзНржЬржи ржХрж░рзБржи! ЁЯОК
"""
        bot.send_message(message.chat.id, refer_msg)
    else:
        error_msg = """
тЭМ ржПржХрж╛ржЙржирзНржЯ ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐!

/start рж▓рж┐ржЦрзЗ ржЖржмрж╛рж░ рж░рзЗржЬрж┐рж╕рзНржЯрж╛рж░ ржХрж░рзБржи
"""
        bot.send_message(message.chat.id, error_msg)

@bot.message_handler(func=lambda m: m.text == "ЁЯЖШ Support")
def support(message):
    support_msg = f"""
ЁЯЖШ рж╕рж╛ржкрзЛрж░рзНржЯ рж╕рзЗржирзНржЯрж╛рж░:

ржпрзЗржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ ржмрж╛ ржкрзНрж░рж╢рзНржирзЗрж░ ржЬржирзНржп ржирж┐ржЪрзЗрж░ рждржерзНржп ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи:

ЁЯУЮ ржЬрж░рзБрж░рзА ржпрзЛржЧрж╛ржпрзЛржЧ:
- Admin: @Raimadmin
- Phone: 01774049543 (WhatsApp/IMO)

тП░ рж╕рж╛ржкрзЛрж░рзНржЯ рж╕ржоржпрж╝:
- рж╕ржХрж╛рж▓ рззрзжржЯрж╛ - рж░рж╛ржд рззрзжржЯрж╛
- рзн ржжрж┐ржи рж╕рж╛ржкрзЛрж░рзНржЯ

ЁЯУЛ рж╕рж╛ржзрж╛рж░ржг рж╕ржорж╕рзНржпрж╛рж░ рж╕ржорж╛ржзрж╛ржи:
1. ржЕрж░рзНржбрж╛рж░ ржирж╛ ржкрзЗрж▓рзЗ - Admin ржХрзЗ ржорзЗрж╕рзЗржЬ ржХрж░рзБржи
2. ржЯрж╛ржХрж╛ ржкрж╛ржарж┐ржпрж╝рзЗржЫрзЗржи ржХрж┐ржирзНрждрзБ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЖржкржбрзЗржЯ рж╣ржпрж╝ржирж┐ - Txn ID рж╕рж╣ ржорзЗрж╕рзЗржЬ ржХрж░рзБржи
3. Gmail рж░рж┐ржЬрзЗржХрзНржЯ рж╣рж▓рзЗ - рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯрзЗ ржЖржмрж╛рж░ ржкрж╛ржарж╛ржи

ЁЯТб ржжрзНрж░рзБржд рж╕рж╛ржкрзЛрж░рзНржЯ ржкрзЗрждрзЗ:
- ржЖржкржирж╛рж░ User ID: {message.from_user.id}
- ржЕрж░рзНржбрж╛рж░/ржЯрзНрж░рж╛ржиржЬрзЗржХрж╢ржи ID ржжрж┐ржпрж╝рзЗ ржорзЗрж╕рзЗржЬ ржХрж░рзБржи

ржЖржорж░рж╛ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрзЗрж░рзЗ ржЖржиржирзНржжрж┐ржд! ЁЯЩП
"""
    bot.send_message(message.chat.id, support_msg)

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if str(message.from_user.id) != ADMIN_ID:
        bot.send_message(message.chat.id, "тЭМ ржЖржкржирж╛рж░ ржЕржирзБржорждрж┐ ржирзЗржЗ!")
        return

    total_users = len(users)
    total_balance = sum(user["balance"] for user in users.values())
    total_hold = sum(user["hold"] for user in users.values())
    total_pending_gmails = len(pending_gmails)

    admin_msg = f"""
ЁЯСС ржЕрзНржпрж╛ржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓:

ЁЯУК рж╕рзНржЯрзНржпрж╛ржЯрж┐рж╕рзНржЯрж┐ржХрзНрж╕:
ЁЯСе ржорзЛржЯ ржЗржЙржЬрж╛рж░: {total_users}
ЁЯТ░ ржорзЛржЯ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {total_balance} TK
тП│ ржорзЛржЯ Hold: {total_hold} TK
ЁЯУз Pending Gmails: {total_pending_gmails}

ЁЯЫая╕П ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржб:
/stats - ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рж╕рзНржЯрзНржпрж╛ржЯрж┐рж╕рзНржЯрж┐ржХрзНрж╕
/users - ржЗржЙржЬрж╛рж░ рждрж╛рж▓рж┐ржХрж╛
/broadcast - ржмрзНрж░ржбржХрж╛рж╕рзНржЯ ржорзЗрж╕рзЗржЬ
/notify - ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЗржЙржЬрж╛рж░ржХрзЗ ржорзЗрж╕рзЗржЬ
"""
    bot.send_message(message.chat.id, admin_msg)

@bot.message_handler(commands=['stats'])
def stats(message):
    if str(message.from_user.id) != ADMIN_ID:
        return

    total_earnings = sum(user["balance"] + user["hold"] for user in users.values())
    total_ref_earnings = sum(user["referral_count"] * 2 for user in users.values())
    total_gmail_earnings = total_earnings - total_ref_earnings

    stats_msg = f"""
ЁЯУИ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рж╕рзНржЯрзНржпрж╛ржЯрж┐рж╕рзНржЯрж┐ржХрзНрж╕:

ЁЯТ░ ржорзЛржЯ ржЖржпрж╝: {total_earnings} TK
ЁЯУз Gmail ржерзЗржХрзЗ: {total_gmail_earnings} TK
ЁЯСе рж░рзЗржлрж╛рж░ ржерзЗржХрзЗ: {total_ref_earnings} TK

ЁЯУК ржЗржЙржЬрж╛рж░ ржПржХрзНржЯрж┐ржнрж┐ржЯрж┐:
- ржЧржбрж╝ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {total_earnings/len(users):.2f} TK/User
- ржЧржбрж╝ рж░рзЗржлрж╛рж░: {sum(user["referral_count"] for user in users.values())/len(users):.2f}/User

ЁЯУЕ ржЖржЬржХрзЗрж░ рж╕рзНржЯрзНржпрж╛ржЯрж╕:
- ржирждрзБржи ржЗржЙржЬрж╛рж░: {len([u for u in users.values() if u.get('joined_date', '').startswith(time.strftime('%Y-%m-%d'))])}
- ржЖржЬржХрзЗрж░ ржЖржпрж╝: {total_earnings/30:.2f} TK (approx)
"""
    bot.send_message(message.chat.id, stats_msg)

@bot.message_handler(commands=['users'])
def list_users(message):
    if str(message.from_user.id) != ADMIN_ID:
        return

    users_list = "\n".join([f"ЁЯСд @{u['username'] or 'N/A'} | ID: {uid} | Bal: {u['balance']} TK" for uid, u in list(users.items())[:10]])
    users_msg = f"""
ЁЯСе рж╕рж░рзНржмрж╢рзЗрж╖ рззрзж ржЗржЙржЬрж╛рж░:

{users_list}

ЁЯТб ржЖрж░ржУ ржжрзЗржЦрждрзЗ: /users_all
"""
    bot.send_message(message.chat.id, users_msg)

@bot.message_handler(commands=['users_all'])
def all_users(message):
    if str(message.from_user.id) != ADMIN_ID:
        return

    with open("users.txt", "w", encoding="utf-8") as f:
        for uid, u in users.items():
            f.write(f"ID: {uid} | User: @{u['username'] or 'N/A'} | Bal: {u['balance']} TK | Ref: {u['referral_count']} | Joined: {u.get('joined_date', 'N/A')}\n")
    
    with open("users.txt", "rb") as f:
        bot.send_document(message.chat.id, f, caption="ЁЯУК рж╕ржХрж▓ ржЗржЙржЬрж╛рж░рзЗрж░ рждрж╛рж▓рж┐ржХрж╛")

# New broadcast logic with photo support
@bot.message_handler(commands=['broadcast'])
def broadcast(message):
    if str(message.from_user.id) != ADMIN_ID:
        bot.send_message(message.chat.id, "тЭМ ржЖржкржирж╛рж░ ржЕржирзБржорждрж┐ ржирзЗржЗ!")
        return

    msg = bot.send_message(message.chat.id, "ЁЯУв ржмрзНрж░ржбржХрж╛рж╕рзНржЯ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛рждрзЗ ржЪрж╛ржи? ржПржХржЯрж┐ ржЫржмрж┐рж╕рж╣ ржХрзНржпрж╛ржкрж╢ржи рж▓рж┐ржЦрзЗ ржкрж╛ржарж╛ржиред рж╢рзБржзрзБ ржЯрзЗржХрзНрж╕ржЯ ржкрж╛ржарж╛рждрзЗ ржЪрж╛ржЗрж▓рзЗ рж╕рж░рж╛рж╕рж░рж┐ ржорзЗрж╕рзЗржЬ рж▓рж┐ржЦрзБржиред")
    bot.register_next_step_handler(msg, send_broadcast)

def send_broadcast(message):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)

    success = 0
    failed = 0
    
    if message.photo:
        photo_id = message.photo[-1].file_id
        caption = message.caption or ""
        
        for user_id in users:
            try:
                bot.send_photo(user_id, photo_id, caption=caption)
                success += 1
                time.sleep(0.1)
            except Exception as e:
                print(f"Failed to send photo broadcast to {user_id}: {e}")
                failed += 1
    else:
        broadcast_msg = message.text
        for user_id in users:
            try:
                bot.send_message(user_id, f"ЁЯУв ржмрзНрж░ржбржХрж╛рж╕рзНржЯ:\n\n{broadcast_msg}")
                success += 1
                time.sleep(0.1)
            except Exception as e:
                print(f"Failed to send text broadcast to {user_id}: {e}")
                failed += 1

    bot.send_message(message.chat.id, f"""
тЬЕ ржмрзНрж░ржбржХрж╛рж╕рзНржЯ рж╕ржорзНржкржирзНржи!

ЁЯУК рж░рзЗржЬрж╛рж▓рзНржЯ:
тЬЕ рж╕ржлрж▓: {success}
тЭМ ржмрзНржпрж░рзНрже: {failed}
ЁЯУК ржорзЛржЯ: {success + failed}
""")
    bot.clear_step_handler(message)

# New notify logic with photo support
@bot.message_handler(commands=['notify'])
def notify_user(message):
    if str(message.from_user.id) != ADMIN_ID:
        bot.send_message(message.chat.id, "тЭМ ржЖржкржирж╛рж░ ржЕржирзБржорждрж┐ ржирзЗржЗ!")
        return

    msg = bot.send_message(message.chat.id, "ЁЯСд ржЗржЙржЬрж╛рж░ ID рж▓рж┐ржЦрзБржи ржпрж╛ржХрзЗ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛рждрзЗ ржЪрж╛ржи:")
    bot.register_next_step_handler(msg, get_notify_message)

def get_notify_message(message):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)
    
    try:
        user_id = str(message.text)
        if user_id not in users:
            bot.send_message(message.chat.id, "тЭМ ржПржЗ ржЗржЙржЬрж╛рж░ ID ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐!")
            bot.clear_step_handler(message)
            return home_menu(message.chat.id)
        
        msg = bot.send_message(message.chat.id, "ЁЯТм ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛рждрзЗ ржЪрж╛ржи? ржПржХржЯрж┐ ржЫржмрж┐рж╕рж╣ ржХрзНржпрж╛ржкрж╢ржи рж▓рж┐ржЦрзЗ ржкрж╛ржарж╛ржиред рж╢рзБржзрзБ ржЯрзЗржХрзНрж╕ржЯ ржкрж╛ржарж╛рждрзЗ ржЪрж╛ржЗрж▓рзЗ рж╕рж░рж╛рж╕рж░рж┐ ржорзЗрж╕рзЗржЬ рж▓рж┐ржЦрзБржиред")
        bot.register_next_step_handler(msg, lambda m: send_notification(m, user_id))
    except:
        bot.send_message(message.chat.id, "тЭМ ржЕржмрзИржз ржЗржЙржЬрж╛рж░ ID!")
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)

def send_notification(message, user_id):
    if message.text == "тЖйя╕П ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи":
        bot.clear_step_handler(message)
        return home_menu(message.chat.id)

    try:
        if message.photo:
            photo_id = message.photo[-1].file_id
            caption = message.caption or ""
            bot.send_photo(user_id, photo_id, caption=f"ЁЯУи Admin ржерзЗржХрзЗ ржорзЗрж╕рзЗржЬ:\n\n{caption}")
        else:
            bot.send_message(user_id, f"ЁЯУи Admin ржерзЗржХрзЗ ржорзЗрж╕рзЗржЬ:\n\n{message.text}")
        
        bot.send_message(message.chat.id, "тЬЕ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ!")
    except Exception as e:
        bot.send_message(message.chat.id, f"тЭМ ржЗржЙржЬрж╛рж░ржХрзЗ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ ржпрж╛ржпрж╝ржирж┐! Error: {e}")
    
    bot.clear_step_handler(message)
    home_menu(message.chat.id)

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    # Check for menu button presses first
    menu_buttons = {
        "ЁЯУд Gmail Sell": gmail_sell,
        "ЁЯУе Gmail Buy": gmail_buy,
        "ЁЯТ│ Balance": check_balance,
        "ЁЯТ╡ Withdraw": withdraw,
        "ЁЯМР Paid VPN Buy": vpn_buy,
        "ЁЯОе YouTube Premium": yt_premium,
        "ЁЯСе Refer": refer,
        "ЁЯЖШ Support": support,
        "ЁЯОБ Play Point Park On": play_point_menu,
    }
    
    if message.text in menu_buttons:
        bot.clear_step_handler(message)
        menu_buttons[message.text](message)
        return

    bot.clear_step_handler(message)
    
    if message.text not in ["ЁЯЗ║ЁЯЗ╕ USA", "ЁЯЗ╣ЁЯЗ╝ Taiwan", "ЁЯЗмЁЯЗз UK", "ЁЯЗ░ЁЯЗ╖ South Korean", "ЁЯУ▓ Bkash", "ЁЯУ▓ Nagad"] and not message.text.startswith('/'):
        unknown_msg = """
тЭМ ржЕржЬрж╛ржирж╛ ржХржорж╛ржирзНржб!

ржЖржкржирж╛рж░ ржорзЗрж╕рзЗржЬржЯрж┐ ржмрзБржЭрж╛ ржпрж╛рзЯржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржирж┐ржЪрзЗрж░ ржорзЗржирзБ ржерзЗржХрзЗ ржПржХржЯрж┐ ржЕржкрж╢ржи ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржиред
"""
        bot.send_message(message.chat.id, unknown_msg)
    
    home_menu(message.chat.id)

if __name__ == "__main__":
    print("ЁЯдЦ Bot is running...")
    bot.infinity_polling()
